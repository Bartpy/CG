#include <GL/glut.h>
#include <stdlib.h>

int gluPer=0;
int kat=90;
int aspect=1;
float X=0;
float Y=0;
float Z=3;
GLdouble cx = 0;
GLdouble cy = 0;
GLdouble cz = -100;
// stae do obsługi menu podręcznego
enum {
    EXIT // wyjście
};
/******FUNKCJE GLUTA******/
// funkcja generująca scenę 3D
void display(void);
// obsługa menu podręcznego
void menu(int v);
// zmiana rozmiaru okna
void reshape(int w, int h);
// obsługa klawiatury
void keyboard (unsigned char key, int x, int y);
// obsługa klawiszy funkcyjnych i klawiszy kursora
void specialKeys (int key, int x, int y);
int main(int argc, char *argv[]) {
    // inicjalizacja biblioteki GLUT
    glutInit (&argc,argv);
    // inicjalizacja bufora ramki
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    // rozmiary głównego okna programu
    glutInitWindowSize (400,400);
    // utworzenie głównego okna programu
    glutCreateWindow ("Szescian");
    // dołączenie funkcji generującej scenę 3D
    glutDisplayFunc (display);
    // dołączenie funkcji wywoływanej przy zmianie rozmiaru okna
    glutReshapeFunc (reshape);
// dołączenie funkcji obsługi klawiatury
    glutKeyboardFunc (keyboard);
// dołączenie funkcji obsługi klawiszy specjalnych
    glutSpecialFunc (specialKeys);
    // utworzenie menu podręcznego
    glutCreateMenu (menu);
    // dodadnie pozycji do menu podręcznego
    glutAddMenuEntry ("Exit",EXIT);
    // określenie przycisku myszki obsługującej menu podręczne
    glutAttachMenu (GLUT_RIGHT_BUTTON);
    // wprowadzenie programu do obsługi pętli komunikatów
    glutMainLoop ();
    return 0;
}
// funkcja rysująca scenę
void display () {
    gluLookAt(X,Y,Z,cx,cy,cz,0,1,0);
    if (gluPer==1) gluPerspective(kat,aspect,1,5);

        // kolor tła - zawartość bufora koloru
        glClearColor (0.0,0.0,0.0,0.0);
    // czyszczenie bufora koloru
    glClear (GL_COLOR_BUFFER_BIT);
// wybór macierzy modelowania
    glMatrixMode (GL_MODELVIEW);
    // macierz modelowania = macierz jednostkowa
    glLoadIdentity ();

    // przesunięcie obiektu o wektor [0,0,-3]
    glTranslatef (0,0,-3.0);
    // kolor kwadratu
    glColor3f (1.0,1.0,1.0);
    // początek definicji kwadratu złożonego z linii
    glBegin (GL_LINES);
    glVertex3f (1.0, 1.0, 1.0);
    glVertex3f (1.0, -1.0, 1.0);
    glVertex3f (-1.0, 1.0, 1.0);
    glVertex3f (-1.0, -1.0, 1.0);
    glVertex3f (1.0, 1.0, 1.0);
    glVertex3f (-1.0, 1.0, 1.0);
    glVertex3f (1.0, -1.0, 1.0);
    glVertex3f (-1.0, -1.0, 1.0);
//
    glVertex3f (1.0, 1.0, -1.0);
    glVertex3f (1.0, -1.0, -1.0);
    glVertex3f (-1.0, 1.0, -1.0);
    glVertex3f (-1.0, -1.0, -1.0);
    glVertex3f (1.0, 1.0, -1.0);
    glVertex3f (-1.0, 1.0, -1.0);
    glVertex3f (1.0, -1.0, -1.0);
    glVertex3f (-1.0, -1.0, -1.0);
//
    glVertex3f (1.0, 1.0, 1.0);
    glVertex3f (1.0, 1.0, -1.0);
    glVertex3f (-1.0, 1.0, 1.0);
    glVertex3f (-1.0, 1.0, -1.0);
    glVertex3f (-1.0, -1.0, 1.0);
    glVertex3f (-1.0, -1.0, -1.0);
    glVertex3f (1.0, -1.0, 1.0);
    glVertex3f (1.0, -1.0, -1.0);
    // koniec definicji prymitywu
    glEnd ();
    // skierowanie polecen do wykonania
    glFlush ();
    // zamiana buforów koloru
    glutSwapBuffers();
}
// obsługa menu podręcznego
void menu (int value) {
    switch (value) {
        // wyjście
    case EXIT:
        exit(0);
    }
}
// zmiana wielkości okna
void reshape (int w,int h) {
    // obszar renderingu - całe okno
    glViewport (0,0,w,h);
    //ustawienie rzutowania
    glMatrixMode (GL_PROJECTION);
    // macierz rzutowania = macierz jednostkowa
    glLoadIdentity ();

    glFrustum (-2.0,2.0,-2.0,2.0,2.0,40.0);

    //Rozmiar bryły odcinania w rzutowaniu prostokatnym
    //glOrtho (-2.0,2.0,-2.0,2.0,-2.0,2.0);
    // generowanie sceny 3D
    display ();
}
// obsługa klawiatury
void keyboard (unsigned char key, int x, int y) {
    // klawisz +
    switch(key) {
    case  '+':
        Z+=0.1;
        break;
    case  '-':
        Z-=0.1;
        break;
    case 'e':
        gluPer=1;
        break;
    case 'q':
        gluPer=0;
        break;
    case  'w':
        kat++;
        break;
    case  's':
        kat--;
        break;
    case  'a':
        aspect++;
        break;
    case  'd':
        aspect--;
        break;
    }
    // odrysowanie okna
    reshape (glutGet (GLUT_WINDOW_WIDTH),glutGet (GLUT_WINDOW_HEIGHT));
}
// obsługa klawiszy funkcyjnych i klawiszy kursora
void specialKeys (int key, int x, int y) {
    switch (key) {
    case GLUT_KEY_LEFT:
        X-=0.1;
        break;
    case GLUT_KEY_UP:
        Y-=0.1;
        break;
    case GLUT_KEY_RIGHT:
        X+=0.1;
        break;
    case GLUT_KEY_DOWN:
        Y+=0.1;
        break;
    }
    // odrysowanie okna
    reshape (glutGet (GLUT_WINDOW_WIDTH),glutGet (GLUT_WINDOW_HEIGHT));
}
