#define GLUT_DISABLE_ATEXIT_HACK
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

int screenWidth = 600;
int screenHeight = 600;
int fps = 60;
int shade = 0;

void display() {
    glLoadIdentity();
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-screenWidth, screenWidth, -screenHeight, screenHeight, 100, -100);
    glEnable(GL_POINT_SMOOTH);
    if(shade == 0)
        glShadeModel(GL_SMOOTH);
    else
        glShadeModel(GL_FLAT);

    glBegin(GL_TRIANGLE_STRIP);
        glColor3f(1.0, 0.0, 0.0);
        glVertex3f(-300, -300, 0);

        glColor3f(0.0, 1.0, 0.0);
        glVertex3f(300, -300, 0);

        glColor3f(0.0, 0.0, 1.0);
        glVertex3f(0, 300, 0);

        glColor3f(0.0, 1.0, 0.0);
        glVertex3f(0, -300, -10);

        glColor3f(1.0, 0.0, 0.0);
        glVertex3f(-300, -300, 0);
    glEnd();

    glutPostRedisplay();
    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y){
    switch(key){
        case 27 :
        case 'q':
            exit(0);
            break;
        case '1':
            shade = 0;
            break;
        case '2':
            shade = 1;
            break;
    }
}

void timerfunc(int p){

    glutPostRedisplay();
    glutTimerFunc(1000/fps, &timerfunc, 0);
}

int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(screenWidth, screenHeight);
    glutCreateWindow(argv[0]);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutTimerFunc(1000/fps, &timerfunc, 0);
    glutMainLoop();
    return 0;
}
