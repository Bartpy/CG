#include <stdlib.h>
#include <GL/glut.h>
#include <math.h>
#include <stdio.h>

#define XMaxOkna 500
#define YMaxOkna 500
#define XPozycjaOkna 100
#define YPozycjaOkna 100

using namespace std;

char tekst[] = "Laboratorium 10";

int tab[20][2];
int i,iMax=20;
int rozmiarPunktu=5,szerokoscLinii=5;
GLenum tryb=GL_POINTS;
int xx=XMaxOkna/2,yy=YMaxOkna/2;
int xpop=xx,ypop=yy+200;/* 100 to promien */
int x=xpop,y=ypop;
float kat,kats;

void rysujL(int xx2, int yy2) {
    glVertex2f(xx, yy);
    glVertex2f(xpop,ypop);
    glVertex2f(xx2,yy2);
    xpop=xx2;
    ypop=yy2;
};

void ustawTablice(int t[][2]) {
    for(i=0; i<20; i++) {
        t[i][0]=rand()%XMaxOkna;
        t[i][1]=rand()%YMaxOkna;
    }
};

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glColor3f(1.0, 0.0, 0.0);

    glPointSize(rozmiarPunktu);
    glLineWidth(szerokoscLinii);

    glBegin(tryb);
    if (iMax>=0 && iMax<=20) {
        for(i=0; i<iMax; i++) {
            glVertex2f(tab[i][0], tab[i][1]);
        }
    } else {
       if (iMax==33){
        kat = M_PI*22.5/180;
        kats=kat;
        for(i=0; i<16; i++) {
            rysujL((int)xx+(x-xx)*cos(kat)-(y-yy)*sin(kat),(int)yy+(x-xx)*sin(kat)+(y-yy)*cos(kat));
            kat+=kats;
        }}
        if (iMax==44){
        glColor3f(1.0,0.0,0.0);
	glVertex2f(100, 100);
	glColor3f(0.0,1.0,0.0);
	glVertex2f(400, 100);
	glColor3f(0.0,0.0,1.0);
	glVertex2f(250, 300);
        };
    }
    glEnd();

    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard (unsigned char key, int x, int y) {
    switch(key) {
        /* ponowne ustawienie wartosci w tablicy, iMax -/+ */
    case  '1':
        ustawTablice(tab);
        break;
    case  '2':
        if (iMax>3) iMax--;
        break;
    case  '3':
        if (iMax<20) iMax++;
        break;
        /* zadanie 2 */
    case  'a':
        if (rozmiarPunktu>1) rozmiarPunktu--;
        break;
    case  's':
        if (rozmiarPunktu<10) rozmiarPunktu++;
        break;
    case  'd':
        if (szerokoscLinii>1) szerokoscLinii--;
        break;
    case  'f':
        if (szerokoscLinii<10) szerokoscLinii++;
        break;
    case  'g':
        glEnable(GL_LINE_STIPPLE);
        glLineStipple(1, 10);
        tryb=GL_LINE_STRIP;
        iMax=20;
        break;
    case  'h':
        glDisable(GL_LINE_STIPPLE);
        tryb=GL_LINE_STRIP;
        iMax=20;
        break;
    case  'j':
        /* GL_FRONT, GL_BACK, GL_FRONT_AND_BACK; GL_POINT, GL_LINE, GL_FILL */
        glEnable(GL_POLYGON_STIPPLE);
        glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
        tryb=GL_POLYGON;
        iMax=8;
        break;
    case  'k':
    glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
        glDisable(GL_POLYGON_STIPPLE);
        break;
        /* zadanie 3 */
    case 'z':
        tryb=GL_LINE_STRIP;
        iMax=33;
        break;
        /* zadanie 4 */
         case 'x':
        tryb=GL_TRIANGLES;
        glShadeModel(GL_SMOOTH);
        iMax=44;
        break;
        /* zadanie 1 */
    case  'q':
        tryb=GL_POINTS;
        iMax=20;
        break;
    case  'w':
        tryb=GL_LINES;
        iMax=20;
        break;
    case  'e':
        tryb=GL_LINE_STRIP;
        iMax=20;
        break;
    case  'r':
        tryb=GL_LINE_LOOP;
        iMax=20;
        break;
    case  't':
        tryb=GL_TRIANGLES;
        iMax=3;
        break;
    case  'y':
        tryb=GL_TRIANGLE_STRIP;
        iMax=4;
        break;
    case  'u':
        tryb=GL_TRIANGLE_FAN;
        iMax=8;
        break;
    case  'i':
        tryb=GL_QUADS;
        iMax=4;
        break;
    case  'o':
        tryb=GL_QUAD_STRIP;
        iMax=8;
        break;
    case  'p':
        tryb=GL_POLYGON;
        iMax=8;
        break;
    default:
        return;
    }
    //reshape (glutGet (GLUT_WINDOW_WIDTH),glutGet (GLUT_WINDOW_HEIGHT));
    display();
}

int main(int argc,char *argv[]) {
    ustawTablice(tab);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(XMaxOkna, YMaxOkna);
    glutInitWindowPosition(XPozycjaOkna,YPozycjaOkna);
    glutCreateWindow(tekst);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
