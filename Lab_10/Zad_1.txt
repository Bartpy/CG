
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <time.h>
#define MODE_2D 0
#define MODE_3D 1
#define LICZBA_PLATKOW 100
#define ANIM_FPS	40	/* Docelowa liczba ramek animacji na sekundę */
#define ROZMIAR_PLATKA 2


int snieg[LICZBA_PLATKOW][2];

void inicjuj_snieg(){

for (int i=0;i<LICZBA_PLATKOW;i++){

    int wsp_x=rand()%glutGet( GLUT_WINDOW_WIDTH )-glutGet( GLUT_WINDOW_WIDTH )/2;
    int wsp_y=rand()%glutGet( GLUT_WINDOW_HEIGHT )-glutGet( GLUT_WINDOW_HEIGHT )/2;
    snieg[i][0]=wsp_x;
    snieg[i][1]=wsp_y;
}

}



void Display()
{

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glLoadIdentity();

  glColor3f(1.0, 0.0, 0.0); // ustawienie koloru czerwonego

  //ustawienie rozmiaru punktów na 10
  glPointSize(ROZMIAR_PLATKA);

  //==== 1. rysowanie punktów  ==========================
  glBegin(GL_POINTS);
    for (int i=0;i<LICZBA_PLATKOW;i++){
    glVertex3f(snieg[i][0], snieg[i][1], 0);
    glVertex3f(snieg[i][0]+ROZMIAR_PLATKA, snieg[i][1], 0);
    glVertex3f(snieg[i][0]-ROZMIAR_PLATKA, snieg[i][1], 0);
    glVertex3f(snieg[i][0], snieg[i][1]+ROZMIAR_PLATKA, 0);
    glVertex3f(snieg[i][0], snieg[i][1]-ROZMIAR_PLATKA, 0);
    }
  glEnd();




    // zamiana buforów koloru
    glutSwapBuffers();
}


void Reshape( int w, int h )
{
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glOrtho(-w/2, (GLdouble) w/2,-h/2, (GLdouble) h/2, -100, 100);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
}

// obsługa klawiatury

void klawiatura( unsigned char key, int x, int y )
{

if (key==27) exit(0);


   Reshape( glutGet( GLUT_WINDOW_WIDTH ), glutGet( GLUT_WINDOW_HEIGHT ) );
    Display();
}


/* Funkcja zegarowa */
void Zegar(int val) {
	for (int i=0;i<LICZBA_PLATKOW;i++){

        snieg[i][1]--;
        snieg[i][0]--;
        if (snieg[i][0]==-glutGet( GLUT_WINDOW_WIDTH )/2){
            snieg[i][0]=glutGet( GLUT_WINDOW_WIDTH )/2;
        }
        if (snieg[i][1]==-glutGet( GLUT_WINDOW_HEIGHT )/2){
            snieg[i][1]=glutGet( GLUT_WINDOW_HEIGHT )/2;
        }
	}
	/* Odrysowanie sceny */
	glutPostRedisplay();
	/* Ponowne wystartowanie zegara */
	glutTimerFunc(1000/ANIM_FPS, Zegar, 0);
}


int main( int argc, char * argv[] )
{
    srand(time(NULL));
  glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB); // ustawienie podwójnegobuforowania i kolorów RGB
glutInitWindowSize(640, 480); // rozmiar okna
glutCreateWindow(argv[0]);
inicjuj_snieg();
glutDisplayFunc(Display); // ustawienie funkcji odpowiedzialnej za rysowanie
glutReshapeFunc(Reshape); // ustawienie funkcji wywoływanej przy
glutTimerFunc(1000/ANIM_FPS, Zegar, 0);
glutKeyboardFunc(klawiatura); // ustawienie funkcji obsługi klawiatury
glutMainLoop(); // wejście do głównej pętli programu
return 0;
}
