
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <time.h>

#define SOLID 0
#define WIRE 1
#define SMOOTH 0
#define FLAT 1


int mode=WIRE;
int cieniowanie=SMOOTH;

void rysuj_piramide(){
        glColor3f(1,0,0);
		glVertex3f( 0, 15, 0);
		glColor3f(0,1,0);
		glVertex3f(-15,-15, 15);
		glColor3f(0,0,1);
		glVertex3f( 15,-15, 15);

		glColor3f(1,0,0);
		glVertex3f( 0, 15, 0);
		glColor3f(0,0,1);
		glVertex3f( 15,-15, 15);
		glColor3f(0,1,0);
		glVertex3f(15,-15, -15);

		glColor3f(1,0,0);
		glVertex3f( 0, 15, 0);
		glColor3f(0,1,0);
		glVertex3f(15,-15, -15);
		glColor3f(0,0,1);
		glVertex3f(-15,-15, -15);

		glColor3f(1,0,0);
		glVertex3f( 0, 15, 0);
		glColor3f(0,0,1);
        glVertex3f(-15,-15,-15);
		glColor3f(0,1,0);
		glVertex3f(-15,-15, 15);
}

void init ()
{

	glShadeModel(GL_SMOOTH);
	glClearColor(0.0f, 0.0f, 0.0f, 0.5f);
	glClearDepth(1.0f);
	glEnable(GL_DEPTH_TEST);

}

void display()
{
    if (cieniowanie==SMOOTH){
        glShadeModel(GL_SMOOTH);
    }
    else{
          glShadeModel(GL_FLAT);
    }
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
if (mode==SOLID){
 glBegin(GL_TRIANGLES);
		rysuj_piramide();
	glEnd();
}
else
{
     glBegin(GL_LINE_STRIP);
		rysuj_piramide();
	glEnd();
}
	glutSwapBuffers ();
}

void reshape (int w, int h)
{
	glViewport     (0, 0, w, h);
	glMatrixMode   (GL_PROJECTION);
	glLoadIdentity ();
	if (h==0)  h=1;
    gluPerspective (60, (float) w / (float) h, 1.0, 500.0);
	glMatrixMode   (GL_MODELVIEW);
	glLoadIdentity ();
	glTranslatef(0, 0, -50);
}

void keys (unsigned char key, int x, int y)
{
	switch (key) {
	       case 27:		exit (0);		break;
	       case 'w': 		{	glTranslatef(0.0f, +1, 0);		break;		}
	       case 's': 		{	glTranslatef(0.0f, -1, 0);		break;		}
	       case 'a': 		{	glTranslatef(-1, 0.0f, 0);		break;		}
	       case 'd': 		{	glTranslatef(+1, 0.0f, 0);		break;		}
	       case 'm': 		{	if (mode==SOLID) mode=WIRE; else mode=SOLID;		break;		}
	        case 'c': 		{	if (cieniowanie==SMOOTH) cieniowanie=FLAT; else cieniowanie=SMOOTH;		break;		}
	       case 'r':        {
	            int r=rand()%256;
	            int g=rand()%256;
	            int b=rand()%256;
	            glClearColor((float)r/256, (float)g/256, (float)b/256, 1.0f); break;
	            }
	       default:		break;
  }
	display();
}

void arrow_keys (int a_keys, int x, int y)
{
	switch (a_keys) {
	       case GLUT_KEY_LEFT:		{glRotatef(-5, 0.0f, 1.0f, 0.0f);		break;		}
	       case GLUT_KEY_RIGHT:	{glRotatef(+5, 0.0f, 1.0f, 0.0f);		break;		}
	       case GLUT_KEY_UP:		  {glScalef(1.01f, 1.01f, 1.01f);		break;		}
	       case GLUT_KEY_DOWN:		{glScalef(0.99f, 0.99f, 0.99f);		break;		}
	       default: break;
 }

	display();
}

int main(int argc,char *argv[])
{
 glutInit(&argc, argv);
 init();
 glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
 glutInitWindowSize(800,600);
 glutCreateWindow(argv[0]);
 glutDisplayFunc(display);
 glutReshapeFunc(reshape);
 glutKeyboardFunc(keys);
 glutSpecialFunc(arrow_keys);
 glutMainLoop();
 return 0;
}

